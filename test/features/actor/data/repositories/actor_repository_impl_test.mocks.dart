// Mocks generated by Mockito 5.4.5 from annotations
// in film_magic/test/features/actor/data/repositories/actor_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:film_magic/core/network/network_info.dart' as _i3;
import 'package:film_magic/features/actor/data/datasources/actor_local_data_source.dart'
    as _i5;
import 'package:film_magic/features/actor/data/datasources/actor_remote_data_source.dart'
    as _i6;
import 'package:film_magic/features/actor/data/models/actor_detail_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeActorDetailModel_0 extends _i1.SmartFake
    implements _i2.ActorDetailModel {
  _FakeActorDetailModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [ActorLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockActorLocalDataSource extends _i1.Mock
    implements _i5.ActorLocalDataSource {
  MockActorLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> cacheActorDetails(_i2.ActorDetailModel? actor) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheActorDetails,
          [actor],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.ActorDetailModel?> getActorDetails(int? actorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActorDetails,
          [actorId],
        ),
        returnValue: _i4.Future<_i2.ActorDetailModel?>.value(),
      ) as _i4.Future<_i2.ActorDetailModel?>);
}

/// A class which mocks [ActorRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockActorRemoteDataSource extends _i1.Mock
    implements _i6.ActorRemoteDataSource {
  MockActorRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ActorDetailModel> getActorDetails(int? actorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActorDetails,
          [actorId],
        ),
        returnValue:
            _i4.Future<_i2.ActorDetailModel>.value(_FakeActorDetailModel_0(
          this,
          Invocation.method(
            #getActorDetails,
            [actorId],
          ),
        )),
      ) as _i4.Future<_i2.ActorDetailModel>);
}
