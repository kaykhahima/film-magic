// Mocks generated by Mockito 5.4.5 from annotations
// in film_magic/test/features/film/data/repositories/film_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:film_magic/core/network/api_client.dart' as _i5;
import 'package:film_magic/core/network/network_info.dart' as _i7;
import 'package:film_magic/features/film/data/datasources/film_local_data_source.dart'
    as _i8;
import 'package:film_magic/features/film/data/datasources/film_remote_data_source.dart'
    as _i9;
import 'package:film_magic/features/film/data/models/film_credits_model.dart'
    as _i4;
import 'package:film_magic/features/film/data/models/film_detail_model.dart'
    as _i3;
import 'package:film_magic/features/film/data/models/film_list_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFilmListModel_1 extends _i1.SmartFake implements _i2.FilmListModel {
  _FakeFilmListModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFilmDetailModel_2 extends _i1.SmartFake
    implements _i3.FilmDetailModel {
  _FakeFilmDetailModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFilmCreditsModel_3 extends _i1.SmartFake
    implements _i4.FilmCreditsModel {
  _FakeFilmCreditsModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i5.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri buildUrl(
    String? endpoint, {
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildUrl,
          [endpoint],
          {#queryParameters: queryParameters},
        ),
        returnValue: _FakeUri_0(
          this,
          Invocation.method(
            #buildUrl,
            [endpoint],
            {#queryParameters: queryParameters},
          ),
        ),
      ) as Uri);

  @override
  _i6.Future<Map<String, dynamic>> get(
    String? endpoint, {
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [endpoint],
          {#queryParameters: queryParameters},
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> post(
    String? endpoint, {
    required Map<String, dynamic>? body,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [endpoint],
          {
            #body: body,
            #queryParameters: queryParameters,
          },
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [FilmLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilmLocalDataSource extends _i1.Mock
    implements _i8.FilmLocalDataSource {
  MockFilmLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> cacheFilmList(
    String? category,
    _i2.FilmListModel? filmList,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheFilmList,
          [
            category,
            filmList,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i2.FilmListModel?> getFilmList(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilmList,
          [category],
        ),
        returnValue: _i6.Future<_i2.FilmListModel?>.value(),
      ) as _i6.Future<_i2.FilmListModel?>);

  @override
  _i6.Future<void> cacheFilmDetails(_i3.FilmDetailModel? filmDetail) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheFilmDetails,
          [filmDetail],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i3.FilmDetailModel?> getFilmDetails(int? filmId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilmDetails,
          [filmId],
        ),
        returnValue: _i6.Future<_i3.FilmDetailModel?>.value(),
      ) as _i6.Future<_i3.FilmDetailModel?>);

  @override
  _i6.Future<void> cacheFilmCredits(
    int? filmId,
    _i4.FilmCreditsModel? credits,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheFilmCredits,
          [
            filmId,
            credits,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i4.FilmCreditsModel?> getFilmCredits(int? filmId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilmCredits,
          [filmId],
        ),
        returnValue: _i6.Future<_i4.FilmCreditsModel?>.value(),
      ) as _i6.Future<_i4.FilmCreditsModel?>);

  @override
  _i6.Future<bool> isCacheValid(
    String? category,
    Duration? maxAge,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isCacheValid,
          [
            category,
            maxAge,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [FilmRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilmRemoteDataSource extends _i1.Mock
    implements _i9.FilmRemoteDataSource {
  MockFilmRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.FilmListModel> getNowPlayingFilms() => (super.noSuchMethod(
        Invocation.method(
          #getNowPlayingFilms,
          [],
        ),
        returnValue: _i6.Future<_i2.FilmListModel>.value(_FakeFilmListModel_1(
          this,
          Invocation.method(
            #getNowPlayingFilms,
            [],
          ),
        )),
      ) as _i6.Future<_i2.FilmListModel>);

  @override
  _i6.Future<_i2.FilmListModel> getPopularFilms() => (super.noSuchMethod(
        Invocation.method(
          #getPopularFilms,
          [],
        ),
        returnValue: _i6.Future<_i2.FilmListModel>.value(_FakeFilmListModel_1(
          this,
          Invocation.method(
            #getPopularFilms,
            [],
          ),
        )),
      ) as _i6.Future<_i2.FilmListModel>);

  @override
  _i6.Future<_i2.FilmListModel> getTopRatedFilms() => (super.noSuchMethod(
        Invocation.method(
          #getTopRatedFilms,
          [],
        ),
        returnValue: _i6.Future<_i2.FilmListModel>.value(_FakeFilmListModel_1(
          this,
          Invocation.method(
            #getTopRatedFilms,
            [],
          ),
        )),
      ) as _i6.Future<_i2.FilmListModel>);

  @override
  _i6.Future<_i2.FilmListModel> getUpcomingFilms() => (super.noSuchMethod(
        Invocation.method(
          #getUpcomingFilms,
          [],
        ),
        returnValue: _i6.Future<_i2.FilmListModel>.value(_FakeFilmListModel_1(
          this,
          Invocation.method(
            #getUpcomingFilms,
            [],
          ),
        )),
      ) as _i6.Future<_i2.FilmListModel>);

  @override
  _i6.Future<_i3.FilmDetailModel> getFilmDetails(int? filmId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilmDetails,
          [filmId],
        ),
        returnValue:
            _i6.Future<_i3.FilmDetailModel>.value(_FakeFilmDetailModel_2(
          this,
          Invocation.method(
            #getFilmDetails,
            [filmId],
          ),
        )),
      ) as _i6.Future<_i3.FilmDetailModel>);

  @override
  _i6.Future<_i4.FilmCreditsModel> getFilmCredits(int? filmId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilmCredits,
          [filmId],
        ),
        returnValue:
            _i6.Future<_i4.FilmCreditsModel>.value(_FakeFilmCreditsModel_3(
          this,
          Invocation.method(
            #getFilmCredits,
            [filmId],
          ),
        )),
      ) as _i6.Future<_i4.FilmCreditsModel>);
}
